package com.example.shop.security.jwt;

import java.io.IOException;
import java.security.Principal;
import java.util.Date;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.example.shop.members.dto.MembersDTO;
import com.example.shop.members.dto.User;
import com.example.shop.security.service.PrincipalDetails;
import com.fasterxml.jackson.databind.ObjectMapper;

//Authentication(인증)
public class JwtAuthenticationFilter extends UsernamePasswordAuthenticationFilter {

   private AuthenticationManager authManager;

   public JwtAuthenticationFilter(AuthenticationManager authManager) {
      this.authManager = authManager;
   }

   @Override
   public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
         throws AuthenticationException {
      System.out.println("JwtAuthenticationFilter => login 요청처리 시작");
      
      try {
         ObjectMapper om = new ObjectMapper();
         MembersDTO user = om.readValue(request.getInputStream(), MembersDTO.class);
         System.out.printf("memberEmail : %s, memberPass : %s\n", user.getMemberEmail(), user.getMemberPass());
         
         //User에 저장된 내용으로 Token으로 만들어주기
         UsernamePasswordAuthenticationToken authenticationToken =
               new UsernamePasswordAuthenticationToken(user.getMemberEmail(), user.getMemberPass());
         
         Authentication authentication = authManager.authenticate(authenticationToken);  
         
         
         System.out.println("authentication:" + authentication.getPrincipal());
         
         PrincipalDetails principalDetails = (PrincipalDetails)authentication.getPrincipal();
         System.out.printf("로그인 완료됨(인증) : %s%s\n", principalDetails.getUsername(),principalDetails.getPassword());
         
         return authentication;
      }catch (IOException e) {
         e.printStackTrace();
      }

      return null;
   }//attemptAuthentication
   
   @Override
   protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain,
         Authentication authResult) throws IOException, ServletException {
      System.out.println("successfulAuthentication 실행됨");
      
      PrincipalDetails principalDetails = (PrincipalDetails)authResult.getPrincipal();
      
      String jwtToken = JWT.create()
    		  .withSubject("mycors")
    		  .withExpiresAt(new Date(System.currentTimeMillis()+(60*1000*60*1L)))//만료기간 3분
    		  .withClaim("memberName", principalDetails.getMembersDTO().getMemberName()) //회원 이름
    		  .withClaim("authRole", principalDetails.getMembersDTO().getAuthRole()) //회원 권한
    		  .withClaim("memberEmail", principalDetails.getMembersDTO().getMemberEmail()) //회원 메일
    		  .sign(Algorithm.HMAC512("mySecurityCos")); //signature을 생성하기 위한 Security
    		  
    		  
      System.out.println("jwtToken:" + jwtToken);
      
//      response 응답헤더에 jwtToken 추가
      response.addHeader("Authorization", "Bearer" + jwtToken);
      
      super.successfulAuthentication(request, response, chain, authResult);
   }
   
   @Override
   protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,
         AuthenticationException failed) throws IOException, ServletException {
      System.out.println("unsuccessfulAuthentication 실행안됨");
      super.unsuccessfulAuthentication(request, response, failed);
   }

}//class

